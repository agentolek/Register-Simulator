Aleksander Nowak
Informacje
Prowadzący:
Rajmund Piotr Kożuszek

Zrealizować program pozwalający użytkownikowi na symulację rejestru zbudowanego z
dowolnej liczby przerzutników połączonych ze sobą.

Wejściem do przerzutnika może być dowolnie wiele wyjść innych przerzutników,
poddanych wybranej operacji logicznej (XOR/AND/NOR etc).

Wyjście N-tego przerzutnika jest zawsze jednym z wejść przerzutnika N+1.
Wyjście ostatniego jest zawsze wejściem (jednym z) pierwszego.

W ten sposób powstaje generator ciągów bitów.

Wymagania
Program powinien wyczytywać połączenia między przerzutnikami z pliku.
Program powinien wygenerować ciągi dla zadanej wartości początkowej i określonej liczby kroków.
Program powinien móc zapisywać wygenerowane ciągi.
Program powinien mieć tryb pracy "aż się zapętli", czyli aż wróci do stanu początkowego.

Uzyskane ciągi powinny być oceniane:
stopień wykorzystania przestrzeni
(szereg N przerzutników hipotetycznie daje 2^N kombinacji a ile zostało wygenerowanych)
różnorodność ciągu - średnia liczba bitów różniących się pomiędzy wyrazami ciągu.
Ze względu na złożoność kombinatoryczną należy w testach podchodzić ostrożnie do liczby przerzutników
(wolne obliczenia).


copy pasted markdown, very outdated!!!!

### Classes

Class LogicGate -> contains:
- type of gate as str, for example: "OR", "AND"
- entry points of gate, which can be other gates or flip-flops. Each gate must have at least one entry,
with the NOT gate also being limited to max 1 gate.
- property value -> returns the caluculated value based on type of gate

Class FlipFlop -> contains:
- logic-gate/flip-flop/bool entering it as input value (bool only for testing purposes)
- property value -> updates the value of the register based on the current input, then returns new value as bool.
- property id -> returns id <mark>this could be useless</mark>
- .update_value() method -> updates the value of the flip-flop to match the current input
- .load_value() method -> loads new value into flip-flop, regardless of what input is.

Class Register -> contains:
- __len__ = number of flip-flops in it
- flip-flops = table of flip-flop objects of "length" length
- .values() method, which returns the values of all flip-flops
- .value_of_index(index) method, which returns the value of a single flip-flop
- .update(values<list[bool]>) method, which updates the values of each flip-flop in the register to match the ones given as argmuent